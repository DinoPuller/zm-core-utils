#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2008, 2009, 2010 Zimbra, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

use strict;

if (scalar(@ARGV) != 1) {
  print(STDERR "Usage: install-openldap <p4-branch-name>\n");
  exit(1);
}

my $BASE_DIR = "/opt/zimbra";
my $CACHE_DIR = "$BASE_DIR/third-party-cache";
my $P4_PATH = "//depot/$ARGV[0]/ThirdPartyBuilds/" . getPlatformDirName();
my %binaries = (
                "sleepycat" => "4.2.52.6",
                "openssl" => "0.9.8m",
                "heimdal" => "1.2",
                "curl" => "7.18.1",
                "cyrus-sasl" => "2.1.23.3z",
                "openldap" => "2.3.43.12z",
               );

if (! -d $CACHE_DIR) {
  mkdir($CACHE_DIR) || die "Could not create directory: $CACHE_DIR";
}

for my $binaryName (keys %binaries) {
  my $version = $binaries{$binaryName};
  my $cmd;
  
  # Copy tarballs to the third party cache directory if necessary.
  my $tarball = "$CACHE_DIR/$binaryName-$version.tgz";
  if (! -f $tarball) {
	$cmd = "p4 print -o $tarball $P4_PATH/$binaryName/$binaryName-$version.tgz";
	runCommand($cmd);
  }
  
  # Untar 
  $cmd = "tar -xzf $tarball -C $BASE_DIR";
  runCommand($cmd);

  # delete existing symlink, but leave the libs...
  $cmd = "rm -f $BASE_DIR/$binaryName";
  runCommand($cmd);
    
  symlink("$BASE_DIR/$binaryName-$version", "$BASE_DIR/$binaryName") || die "Could not create symlink for $binaryName";
}

sub runCommand($) {
  my $cmd = shift();
  print("$cmd\n");
  system($cmd);
  if ($? != 0) {
	print(STDERR "An error occurred while running '$cmd'.\n");
	exit(1);
  }
}

sub getPlatformDirName() {
  my $os = `uname -s`;
  chomp($os);
  my $dirName;
  
  if ($os eq "Darwin") {
	my $version = `uname -r | cut -f1 -d.`;
	chomp($version);
    $dirName = "MACOSXx86";
  } else {
	if (-f "/etc/redhat-release") {
      $dirName = "RHEL4";
	} else {
      $dirName = "UBUNTU8";
	}
  }
  
  return $dirName;
}
